{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","titles","state","checked","onThemeSwitchChange","bind","this","setState","setTheme","body","document","newTheme","getAttribute","setAttribute","props","sharedData","name","map","x","toUpperCase","flat","HeaderTitleTypeAnimation","React","memo","className","steps","loop","prevProp","id","style","height","window","innerHeight","display","data-icon","data-inline","wrapper","onChange","offColor","onColor","width","uncheckedIcon","fontSize","textAlign","marginLeft","color","checkedIcon","Component","Footer","lazy","About","Projects","Skills","App","foo","resumeData","oppositeLangIconId","swapCurrentlyActiveLanguage","loadResumeFromPath","pickedLangIconId","$primaryLanguageIconId","$secondaryLanguageIconId","getElementById","loadSharedData","applyPickedLanguage","$primaryLanguage","path","$","ajax","url","dataType","cache","success","data","error","xhr","status","err","alert","title","basic_info","fallback","resumeBasicInfo","sharedBasicInfo","resumeProjects","projects","sharedSkills","skills","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","$secondaryLanguage","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0be2c456.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Typical from \"react-typical\";\nimport Switch from \"react-switch\";\n\nclass Header extends Component {\n  titles = [];\n\n  constructor() {\n    super();\n    this.state = { checked: false };\n    this.onThemeSwitchChange = this.onThemeSwitchChange.bind(this);\n  }\n\n  onThemeSwitchChange(checked) {\n    this.setState({ checked });\n    this.setTheme();\n  }\n\n  setTheme() {\n    var dataThemeAttribute = \"data-theme\";\n    var body = document.body;\n    var newTheme =\n      body.getAttribute(dataThemeAttribute) === \"light\" ? \"dark\" : \"light\";\n    body.setAttribute(dataThemeAttribute, newTheme);\n  }\n\n  render() {\n    if (this.props.sharedData) {\n      var name = this.props.sharedData.name;\n      this.titles = this.props.sharedData.titles.map(x => [ x.toUpperCase(), 1500 ] ).flat();\n    }\n\n    const HeaderTitleTypeAnimation = React.memo( () => {\n      return <Typical className=\"title-styles\" steps={this.titles} loop={50} />\n    }, (props, prevProp) => true);\n\n    return (\n      <header id=\"home\" style={{ height: window.innerHeight - 70, display: 'block' }}>\n        <div className=\"row aligner\" style={{height: '100%'}}>\n          <div className=\"col-md-12\">\n            <div>\n              <span className=\"iconify header-icon\" data-icon=\"la:laptop-code\" data-inline=\"false\"></span>\n              <br/>\n              <h1 className=\"mb-0\">\n                <Typical steps={[name]} wrapper=\"p\" />\n              </h1>\n              <div className=\"title-container\">\n                <HeaderTitleTypeAnimation />\n              </div>\n              <Switch\n                checked={this.state.checked}\n                onChange={this.onThemeSwitchChange}\n                offColor=\"#baaa80\"\n                onColor=\"#353535\"\n                className=\"react-switch mx-auto\"\n                width={90}\n                height={40}\n                uncheckedIcon={\n                  <span\n                    className=\"iconify\"\n                    data-icon=\"bi:moon-fill\"\n                    data-inline=\"false\"\n                    style={{\n                      display: \"block\",\n                      height: \"100%\",\n                      fontSize: 25,\n                      textAlign: \"end\",\n                      marginLeft: \"20px\",\n                      color: \"#353239\",\n                    }}\n                  ></span>\n                }\n                checkedIcon={\n                  <span\n                    className=\"iconify\"\n                    data-icon=\"emojione-monotone:sun\"\n                    data-inline=\"false\"\n                    style={{\n                      display: \"block\",\n                      height: \"100%\",\n                      fontSize: 25,\n                      textAlign: \"end\",\n                      marginLeft: \"10px\",\n                      color: \"white\",\n                    }}\n                  ></span>\n                }\n                id=\"icon-switch\"\n              />\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component, lazy, Suspense } from \"react\";\nimport $ from \"jquery\";\nimport \"./App.scss\";\n\nimport Header from \"./components/Header\";\nconst Footer = lazy(() => import(\"./components/Footer\"));\nconst About = lazy(() => import(\"./components/About\"));\nconst Experience = lazy(() => import(\"./components/Experience\"));\nconst Projects = lazy(() => import(\"./components/Projects\"));\nconst Skills = lazy(() => import(\"./components/Skills\"));\n\nclass App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      foo: \"bar\",\n      resumeData: {},\n      sharedData: {},\n    };\n  }\n\n  applyPickedLanguage(oppositeLangIconId) {\n    this.swapCurrentlyActiveLanguage(oppositeLangIconId);\n    var resumePath = `res_primaryLanguage.json`;\n    this.loadResumeFromPath(resumePath);\n  }\n\n  swapCurrentlyActiveLanguage(oppositeLangIconId) {\n    var pickedLangIconId =\n      oppositeLangIconId === window.$primaryLanguageIconId\n        ? window.$secondaryLanguageIconId\n        : window.$primaryLanguageIconId;\n    document.getElementById(oppositeLangIconId);\n    document.getElementById(pickedLangIconId);\n  }\n\n  componentDidMount() {\n    this.loadSharedData();\n    this.applyPickedLanguage(\n      window.$primaryLanguage,\n      window.$secondaryLanguageIconId\n    );\n  }\n\n  loadResumeFromPath(path) {\n    $.ajax({\n      url: path,\n      dataType: \"json\",\n      cache: false,\n      success: function (data) {\n        this.setState({ resumeData: data });\n      }.bind(this),\n      error: function (xhr, status, err) {\n        alert(err);\n      },\n    });\n  }\n\n  loadSharedData() {\n    $.ajax({\n      url: `portfolio_shared_data.json`,\n      dataType: \"json\",\n      cache: false,\n      success: function (data) {\n        this.setState({ sharedData: data });\n        document.title = `${this.state.sharedData.basic_info.name}`;\n      }.bind(this),\n      error: function (xhr, status, err) {\n        alert(err);\n      },\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header sharedData={this.state.sharedData.basic_info} />\n        <Suspense fallback={<p/>}>\n          <About\n            resumeBasicInfo={this.state.resumeData.basic_info}\n            sharedBasicInfo={this.state.sharedData.basic_info}\n          />\n        </Suspense>\n        <Suspense fallback={<p />}>\n          <Projects\n            resumeProjects={this.state.resumeData.projects}\n            resumeBasicInfo={this.state.resumeData.basic_info}\n          />\n        </Suspense>\n        <Suspense fallback={<p />}>\n          <Skills\n            sharedSkills={this.state.sharedData.skills}\n            resumeBasicInfo={this.state.resumeData.basic_info}\n          />\n        </Suspense>\n        {/* <Suspense fallback={<p />}>\n          <Experience\n            resumeExperience={this.state.resumeData.experience}\n            resumeBasicInfo={this.state.resumeData.basic_info}\n          />\n        </Suspense> */}\n        <Suspense fallback={<p />}>\n          <Footer sharedBasicInfo={this.state.sharedData.basic_info} />\n        </Suspense>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/* GLOBAL VARIABLES */\n\nwindow.$primaryLanguage = 'en';\nwindow.$secondaryLanguage = 'pl';\nwindow.$primaryLanguageIconId = 'primary-lang-icon';\nwindow.$secondaryLanguageIconId = 'secondary-lang-icon';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}